# Metagroup 2: POS method (90d)
df$count_mgroup2 <- 0
df[df$ind_group17_e == 1, ]$count_mgroup2 <- df[df$ind_group17_e == 1, ]$count_group17_e_p180d
# df[df$ind_group17_s == 1, ]$count_mgroup2 <- df$count_group17_s_p90d
df[df$ind_group17_u == 1, ]$count_mgroup2 <- df[df$ind_group17_u == 1, ]$count_group17_u_p180d
df[df$ind_group17_k == 1, ]$count_mgroup2 <- df[df$ind_group17_k == 1, ]$count_group17_k_p180d
# Metagroup 3: Type
df$count_mgroup3 <- 0
df[df$ind_group4 == 1, ]$count_mgroup3 <- df[df$ind_group4 == 1, ]$count_group4_p90d
df[df$ind_group5 == 1, ]$count_mgroup3 <- df[df$ind_group5 == 1, ]$count_group5_p90d
df[df$ind_group7 == 1, ]$count_mgroup3 <- df[df$ind_group7 == 1, ]$count_group7_p30d
df[df$ind_group9 == 1, ]$count_mgroup3 <- df[df$ind_group9 == 1, ]$count_group9_p90d
df[df$ind_group10 == 1, ]$count_mgroup3 <- 3*df[df$ind_group10 == 1, ]$count_group10_p30d
df[df$ind_group18 == 1, ]$count_mgroup3 <- df[df$ind_group18 == 1, ]$count_group18_p180d/2
df[df$ind_group19 == 1, ]$count_mgroup3 <- df[df$ind_group19 == 1, ]$count_group19_p180d/2
# df[df$ind_group24 == 1, ]$count_mgroup3 <- df$count_group24_p90d
df.names[str_detect(df.names, "count_group4")]
l <- subset(df, ind_group4 == 1, select = c("fraud_ind", "count_group4_p180d"))
aggregate(count_group4_p180d ~ fraud_ind, l, max)
# Standard Deviation: mgroup ----------------------------------------------
# Metagroup 1: location (90d)
df$std_mgroup1 <- df$std_group13_p90d
df$mean_mgroup1 <- df$mean_group13_p90d
l <- subset(df, subset = std_mgroup1 != 0 & validation == 0, select = c("fraud_ind", "mean_mgroup1", "authzn_amt", "std_mgroup1"))
l$diff <- apply(l, 1, function(x) abs(x['mean_mgroup1'] - x['authzn_amt']) / x['std_mgroup1'])
aggregate(diff ~ fraud_ind, l, median)
# Metagroup 2: POS method (90d)
df$std_mgroup2 <- 99999999999999999
df$mean_mgroup2 <- 0
df[df$ind_group17_e == 1, ]$std_mgroup2 <- df$std_group17_e_p90d
df[df$ind_group17_s == 1, ]$std_mgroup2 <- df$std_group17_s_p90d
df[df$ind_group17_u == 1, ]$std_mgroup2 <- df$std_group17_u_p90d
df[df$ind_group17_k == 1, ]$std_mgroup2 <- df$std_group17_k_p90d
df[df$ind_group17_e == 1, ]$mean_mgroup2 <- df$mean_group17_e_p90d
df[df$ind_group17_s == 1, ]$mean_mgroup2 <- df$mean_group17_s_p90d
df[df$ind_group17_u == 1, ]$mean_mgroup2 <- df$mean_group17_u_p90d
df[df$ind_group17_k == 1, ]$mean_mgroup2 <- df$mean_group17_k_p90d
df$mgroup2_extreme <- abs(df$mean_mgroup2 - df$authzn_amt) / df$std_group2
# Metagroup 3: Type
df$std_mgroup3 <- 99999999999999999
df$mean_mgroup3 <- 0
df[df$ind_group4 == 1, ]$std_mgroup3 <- df$std_group4_p90d
df[df$ind_group5 == 1, ]$std_mgroup3 <- df$std_group5_p90d
df[df$ind_group7 == 1, ]$std_mgroup3 <- df$std_group7_p30d
df[df$ind_group9 == 1, ]$std_mgroup3 <- df$std_group9_p90d
# df[df$ind_group10 == 1, ]$std_mgroup3 <- df$std_group10_p90d
df[df$ind_group18 == 1, ]$std_mgroup3 <- df$std_group18_p180d
df[df$ind_group19 == 1, ]$std_mgroup3 <- df$std_group19_p180d
# df[df$ind_group24 == 1, ]$std_mgroup3 <- df$std_group24_p90d
df[df$ind_group4 == 1, ]$mean_mgroup3 <- df$mean_group4_p90d
df[df$ind_group5 == 1, ]$mean_mgroup3 <- df$mean_group5_p90d
df[df$ind_group7 == 1, ]$mean_mgroup3 <- df$mean_group7_p30d
df[df$ind_group9 == 1, ]$mean_mgroup3 <- df$mean_group9_p90d
# df[df$ind_group10 == 1, ]$mean_mgroup3 <- df$mean_group10_p90d
df[df$ind_group18 == 1, ]$mean_mgroup3 <- df$mean_group18_p180d
df[df$ind_group19 == 1, ]$mean_mgroup3 <- df$mean_group19_p180d
# df[df$ind_group24 == 1, ]$mean_mgroup3 <- df$mean_group24_p90d
df$mgroup3_extreme <- abs(df$mean_mgroup3 - df$authzn_amt) / df$std_group3
# Create Train and Test Data Frames ---------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
q()
load("uwdmc2013_raw")
library(stringr)
library(plyr)
library(reshape2)
names(df) <- tolower(names(df))
df.names <- names(df)
# Metagroup Indicator Variables -------------------------------------------
# Group 1: location
# Group 2: POS method
# Group 3: Type
# Group 4: Time
# Group 5: Amount - type
# Group 6: Behavioural
# Metagroup 1: location
df$mgroup1 <- factor(df$ind_group13)
# Metagroup 2: POS method
df$mgroup2 <- "other"
df[df$ind_group17_e == 1, ]$mgroup2 <- "e"
df[df$ind_group17_k == 1, ]$mgroup2 <- "k"
df[df$ind_group17_u == 1, ]$mgroup2 <- "u"
# df[df$ind_group17_s == 1, ]$mgroup2 <- "s"
df$mgroup2 <- factor(df$mgroup2)
# Metagroup 3: Type
df$mgroup3 <- "other"
df[df$ind_group4 == 1, ]$mgroup3 <- "auto"
df[df$ind_group5 == 1, ]$mgroup3 <- "discount"
df[df$ind_group7 == 1, ]$mgroup3 <- "elctrncs"
df[df$ind_group9 == 1, ]$mgroup3 <- "fastfood"
df[df$ind_group10 == 1, ]$mgroup3 <- "gas"
df[df$ind_group18 == 1, ]$mgroup3 <- "risky"
df[df$ind_group19 == 1, ]$mgroup3 <- "te"
df[df$ind_group24 == 1, ]$mgroup3 <- "jewellery"
df$mgroup3 <- factor(df$mgroup3)
# Metagroup 4: Time
df$mgroup4 <- factor(df$ind_group21)
# Metagroup 5: Amount - type
df$mgroup5 <- factor(df$ind_group8)
# Metagroup 6: Behavioural
# This is a unique group because a new variable has been created:
# discret : Discretionary (samething as ind_group6)
# Nondiscretcomp : Non-discretionary and compulsory
df$mgroup6 <- "other"
df[df$ind_group6 == 1, ]$mgroup6 <- "discret"
df[(df$ind_group6 == 0 & df$ind_group4 == 1), ]$mgroup6 <- "nondiscretcomp"
df$mgroup6 <- factor(df$mgroup6)
# Count: mgroup ----------------------------------------------
# Metagroup 1: location (90d)
df$count_mgroup1 <- df$count_group13_p180d
# Metagroup 2: POS method (90d)
df$count_mgroup2 <- 0
df[df$ind_group17_e == 1, ]$count_mgroup2 <- df[df$ind_group17_e == 1, ]$count_group17_e_p180d
# df[df$ind_group17_s == 1, ]$count_mgroup2 <- df$count_group17_s_p90d
df[df$ind_group17_u == 1, ]$count_mgroup2 <- df[df$ind_group17_u == 1, ]$count_group17_u_p180d
df[df$ind_group17_k == 1, ]$count_mgroup2 <- df[df$ind_group17_k == 1, ]$count_group17_k_p180d
# Metagroup 3: Type
df$count_mgroup3 <- 0
df[df$ind_group4 == 1, ]$count_mgroup3 <- df[df$ind_group4 == 1, ]$count_group4_p90d
df[df$ind_group5 == 1, ]$count_mgroup3 <- df[df$ind_group5 == 1, ]$count_group5_p90d
df[df$ind_group7 == 1, ]$count_mgroup3 <- df[df$ind_group7 == 1, ]$count_group7_p30d
df[df$ind_group9 == 1, ]$count_mgroup3 <- df[df$ind_group9 == 1, ]$count_group9_p90d
df[df$ind_group10 == 1, ]$count_mgroup3 <- 3*df[df$ind_group10 == 1, ]$count_group10_p30d
df[df$ind_group18 == 1, ]$count_mgroup3 <- df[df$ind_group18 == 1, ]$count_group18_p180d/2
df[df$ind_group19 == 1, ]$count_mgroup3 <- df[df$ind_group19 == 1, ]$count_group19_p180d/2
# df[df$ind_group24 == 1, ]$count_mgroup3 <- df$count_group24_p90d
df.names[str_detect(df.names, "count_group4")]
l <- subset(df, ind_group4 == 1, select = c("fraud_ind", "count_group4_p180d"))
aggregate(count_group4_p180d ~ fraud_ind, l, max)
# Standard Deviation: mgroup ----------------------------------------------
# Metagroup 1: location (90d)
df$std_mgroup1 <- df$std_group13_p90d
df$mean_mgroup1 <- df$mean_group13_p90d
l <- subset(df, subset = std_mgroup1 != 0 & validation == 0, select = c("fraud_ind", "mean_mgroup1", "authzn_amt", "std_mgroup1"))
l$diff <- apply(l, 1, function(x) abs(x['mean_mgroup1'] - x['authzn_amt']) / x['std_mgroup1'])
aggregate(diff ~ fraud_ind, l, median)
# Metagroup 2: POS method (90d)
df$std_mgroup2 <- 99999999999999999
df$mean_mgroup2 <- 0
df[df$ind_group17_e == 1, ]$std_mgroup2 <- df$std_group17_e_p90d
df[df$ind_group17_s == 1, ]$std_mgroup2 <- df$std_group17_s_p90d
df[df$ind_group17_u == 1, ]$std_mgroup2 <- df$std_group17_u_p90d
df[df$ind_group17_k == 1, ]$std_mgroup2 <- df$std_group17_k_p90d
df[df$ind_group17_e == 1, ]$mean_mgroup2 <- df$mean_group17_e_p90d
df[df$ind_group17_s == 1, ]$mean_mgroup2 <- df$mean_group17_s_p90d
df[df$ind_group17_u == 1, ]$mean_mgroup2 <- df$mean_group17_u_p90d
df[df$ind_group17_k == 1, ]$mean_mgroup2 <- df$mean_group17_k_p90d
df$mgroup2_extreme <- abs(df$mean_mgroup2 - df$authzn_amt) / df$std_group2
# Metagroup 3: Type
df$std_mgroup3 <- 99999999999999999
df$mean_mgroup3 <- 0
df[df$ind_group4 == 1, ]$std_mgroup3 <- df$std_group4_p90d
df[df$ind_group5 == 1, ]$std_mgroup3 <- df$std_group5_p90d
df[df$ind_group7 == 1, ]$std_mgroup3 <- df$std_group7_p30d
df[df$ind_group9 == 1, ]$std_mgroup3 <- df$std_group9_p90d
# df[df$ind_group10 == 1, ]$std_mgroup3 <- df$std_group10_p90d
df[df$ind_group18 == 1, ]$std_mgroup3 <- df$std_group18_p180d
df[df$ind_group19 == 1, ]$std_mgroup3 <- df$std_group19_p180d
# df[df$ind_group24 == 1, ]$std_mgroup3 <- df$std_group24_p90d
df[df$ind_group4 == 1, ]$mean_mgroup3 <- df$mean_group4_p90d
df[df$ind_group5 == 1, ]$mean_mgroup3 <- df$mean_group5_p90d
df[df$ind_group7 == 1, ]$mean_mgroup3 <- df$mean_group7_p30d
df[df$ind_group9 == 1, ]$mean_mgroup3 <- df$mean_group9_p90d
# df[df$ind_group10 == 1, ]$mean_mgroup3 <- df$mean_group10_p90d
df[df$ind_group18 == 1, ]$mean_mgroup3 <- df$mean_group18_p180d
df[df$ind_group19 == 1, ]$mean_mgroup3 <- df$mean_group19_p180d
# df[df$ind_group24 == 1, ]$mean_mgroup3 <- df$mean_group24_p90d
df$mgroup3_extreme <- abs(df$mean_mgroup3 - df$authzn_amt) / df$std_group3
# Create Train and Test Data Frames ---------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
q()
load("uwdmc2013_raw")
library(stringr)
library(plyr)
library(reshape2)
names(df) <- tolower(names(df))
df.names <- names(df)
# Metagroup Indicator Variables -------------------------------------------
# Group 1: location
# Group 2: POS method
# Group 3: Type
# Group 4: Time
# Group 5: Amount - type
# Group 6: Behavioural
# Metagroup 1: location
df$mgroup1 <- factor(df$ind_group13)
# Metagroup 2: POS method
df$mgroup2 <- "other"
df[df$ind_group17_e == 1, ]$mgroup2 <- "e"
df[df$ind_group17_k == 1, ]$mgroup2 <- "k"
df[df$ind_group17_u == 1, ]$mgroup2 <- "u"
# df[df$ind_group17_s == 1, ]$mgroup2 <- "s"
df$mgroup2 <- factor(df$mgroup2)
# Metagroup 3: Type
df$mgroup3 <- "other"
df[df$ind_group4 == 1, ]$mgroup3 <- "auto"
df[df$ind_group5 == 1, ]$mgroup3 <- "discount"
df[df$ind_group7 == 1, ]$mgroup3 <- "elctrncs"
df[df$ind_group9 == 1, ]$mgroup3 <- "fastfood"
df[df$ind_group10 == 1, ]$mgroup3 <- "gas"
df[df$ind_group18 == 1, ]$mgroup3 <- "risky"
df[df$ind_group19 == 1, ]$mgroup3 <- "te"
df[df$ind_group24 == 1, ]$mgroup3 <- "jewellery"
df$mgroup3 <- factor(df$mgroup3)
# Metagroup 4: Time
df$mgroup4 <- factor(df$ind_group21)
# Metagroup 5: Amount - type
df$mgroup5 <- factor(df$ind_group8)
# Metagroup 6: Behavioural
# This is a unique group because a new variable has been created:
# discret : Discretionary (samething as ind_group6)
# Nondiscretcomp : Non-discretionary and compulsory
df$mgroup6 <- "other"
df[df$ind_group6 == 1, ]$mgroup6 <- "discret"
df[(df$ind_group6 == 0 & df$ind_group4 == 1), ]$mgroup6 <- "nondiscretcomp"
df$mgroup6 <- factor(df$mgroup6)
# Count: mgroup ----------------------------------------------
# Metagroup 1: location (90d)
df$count_mgroup1 <- df$count_group13_p180d
# Metagroup 2: POS method (90d)
df$count_mgroup2 <- 0
df[df$ind_group17_e == 1, ]$count_mgroup2 <- df[df$ind_group17_e == 1, ]$count_group17_e_p180d
# df[df$ind_group17_s == 1, ]$count_mgroup2 <- df$count_group17_s_p90d
df[df$ind_group17_u == 1, ]$count_mgroup2 <- df[df$ind_group17_u == 1, ]$count_group17_u_p180d
df[df$ind_group17_k == 1, ]$count_mgroup2 <- df[df$ind_group17_k == 1, ]$count_group17_k_p180d
# Metagroup 3: Type
df$count_mgroup3 <- 0
df[df$ind_group4 == 1, ]$count_mgroup3 <- df[df$ind_group4 == 1, ]$count_group4_p90d
df[df$ind_group5 == 1, ]$count_mgroup3 <- df[df$ind_group5 == 1, ]$count_group5_p90d
df[df$ind_group7 == 1, ]$count_mgroup3 <- df[df$ind_group7 == 1, ]$count_group7_p30d
df[df$ind_group9 == 1, ]$count_mgroup3 <- df[df$ind_group9 == 1, ]$count_group9_p90d
df[df$ind_group10 == 1, ]$count_mgroup3 <- 3*df[df$ind_group10 == 1, ]$count_group10_p30d
df[df$ind_group18 == 1, ]$count_mgroup3 <- df[df$ind_group18 == 1, ]$count_group18_p180d/2
df[df$ind_group19 == 1, ]$count_mgroup3 <- df[df$ind_group19 == 1, ]$count_group19_p180d/2
# df[df$ind_group24 == 1, ]$count_mgroup3 <- df$count_group24_p90d
df.names[str_detect(df.names, "count_group4")]
l <- subset(df, ind_group4 == 1, select = c("fraud_ind", "count_group4_p180d"))
aggregate(count_group4_p180d ~ fraud_ind, l, max)
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
library(party)
library(foreach)
library(randomForest)
library(e1071)
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
set.seed(1234)
index <- 1:nrow(train.df)
trainindex <- sample(index, as.integer(length(index)*0.6))
# Convert to factors
# Also note we define a new data frame (as a backup)
train2.df <- train.df
train2.df$sb_indf <- factor(train2.df$sb_ind)
train2.df$cnp_indf <- factor(train2.df$cnp_ind)
train2.df$fraud_indf <- factor(train2.df$fraud_ind)
train.sub <- train2.df[trainindex, ]
valid.sub <- train2.df[-trainindex, ]
m.class <- naiveBayes(fraud_ind ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3,
data=train.sub)
valid.sub$pred_class <- predict(m.class, valid.sub)
summary(m.class)
mc.ass
m.class
?predict.naiveBayes
valid.sub$pred_class <- predict(m.class, valid.sub, type="class")
ncol(train.sub)
ncol(valid.sub)
l <- predict(m.class, valid.sub, type="class")
l
data(iris)
head(iris)
class(iris$Species)
class(train.sub$fraud_ind)
library(party)
library(foreach)
library(randomForest)
library(e1071)
# Create Train, Validation, Test ------------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
set.seed(1234)
index <- 1:nrow(train.df)
trainindex <- sample(index, as.integer(length(index)*0.6))
# Convert to factors
# Also note we define a new data frame (as a backup)
train2.df <- train.df
train2.df$sb_indf <- factor(train2.df$sb_ind)
train2.df$cnp_indf <- factor(train2.df$cnp_ind)
train2.df$fraud_indf <- factor(train2.df$fraud_ind)
train.sub <- train2.df[trainindex, ]
valid.sub <- train2.df[-trainindex, ]
library(party)
library(foreach)
library(randomForest)
library(e1071)
# Create Train, Validation, Test ------------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
set.seed(1234)
index <- 1:nrow(train.df)
trainindex <- sample(index, as.integer(length(index)*0.6))
# Convert to factors
# Also note we define a new data frame (as a backup)
train2.df <- train.df
train2.df$sb_ind <- factor(train2.df$sb_ind)
train2.df$cnp_ind <- factor(train2.df$cnp_ind)
train2.df$fraud_ind <- factor(train2.df$fraud_ind)
train.sub <- train2.df[trainindex, ]
valid.sub <- train2.df[-trainindex, ]
library(party)
library(foreach)
library(randomForest)
library(e1071)
# Create Train, Validation, Test ------------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
set.seed(1234)
index <- 1:nrow(train.df)
trainindex <- sample(index, as.integer(length(index)*0.6))
# Convert to factors
# Also note we define a new data frame (as a backup)
train2.df <- train.df
train2.df$sb_ind <- factor(train2.df$sb_ind)
train2.df$cnp_ind <- factor(train2.df$cnp_ind)
train2.df$fraud_indf <- factor(train2.df$fraud_ind)
train.sub <- train2.df[trainindex, ]
valid.sub <- train2.df[-trainindex, ]
m.glm <- glm(fraud_ind ~ sb_indf + cnp_indf + authzn_amt + cl_amt,
family=binomial(logit), data=train.sub)
# Fit ctree model
m.ctree <- ctree(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3,
data=train.sub)
library(party)
library(foreach)
library(randomForest)
library(e1071)
# Create Train, Validation, Test ------------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
set.seed(1234)
index <- 1:nrow(train.df)
trainindex <- sample(index, as.integer(length(index)*0.6))
# Convert to factors
# Also note we define a new data frame (as a backup)
train2.df <- train.df
train2.df$sb_indf <- factor(train2.df$sb_ind)
train2.df$cnp_indf <- factor(train2.df$cnp_ind)
train2.df$fraud_indf <- factor(train2.df$fraud_ind)
train.sub <- train2.df[trainindex, ]
valid.sub <- train2.df[-trainindex, ]
# Fit basic GLM model
m.glm <- glm(fraud_ind ~ sb_indf + cnp_indf + authzn_amt + cl_amt,
family=binomial(logit), data=train.sub)
# Fit ctree model
m.ctree <- ctree(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3,
data=train.sub)
names(train2.df)
m.glm2 <- glm(fraud_ind ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3,
family=binomial(logit), data=train.sub)
summary(m.glm2)
m.class <- naiveBayes(fraud_ind ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3,
data=train.sub)
valid.sub$pred_glm <- round(predict(m.glm, valid.sub, type="response"), digits=0)
DfAttritionCost(valid.sub, "pred_glm")
# AttritionCost : calculates the attrition cost given the 4 arguments
AttritionCost <- function(obs, pred, creditlimit, purchase_amt) {
# Safety check for data types
purchase_amt <- as.numeric(purchase_amt)
obs <- as.integer(obs)
pred <- as.integer(pred)
if (obs == pred) cost <- 0
else {
if (obs == 1 && pred == 0) cost <- purchase_amt
else {
if (creditlimit <= 2000) cost <- 0.02*75 + purchase_amt*0.0075
else cost <- 0.05*275 + 4*purchase_amt*0.005
}
}
return(cost)
}
# DfAttritionCost : calculates the total attrition cost for an entire data frame
DfAttritionCost <- function(df, pred) {
cnames <- c("fraud_ind", pred, "cl_amt", "authzn_amt")
df2 <- subset(df, select = cnames)
names(df2) <- c("fraud_ind", "pred", "cl_amt", "authzn_amt")
df2 <- subset(df2, fraud_ind != pred)
acost <- sum(apply(df2, 1, function(x)
AttritionCost(x['fraud_ind'], x['pred'], x['cl_amt'], x['authzn_amt'])))
return(acost)
}
m.class <- naiveBayes(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3,
data=train.sub)
valid.sub$pred_glm <- round(predict(m.glm, valid.sub, type="response"), digits=0)
DfAttritionCost(valid.sub, "pred_glm")
valid.sub$pred_ctree <- ifelse(predict(m.ctree, valid.sub, type="response") >= 0.15, 1, 0)
valid.sub$pred_ctree <- predict(m.ctree, valid.sub)
table(valid.sub$pred_ctree)
DfAttritionCost(valid.sub, "pred_glm")
DfAttritionCost(valid.sub, "pred_ctree")
m.glm2 <- glm(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3,
family=binomial(logit), data=train.sub)
summary(m.glm2)
valid.sub$pred_glm2 <- predict(m.glm2, valid.sub)
class(valid.sub$pred_glm2)
summary(valid.sub$pred_glm2)
?predict.glm
valid.sub$pred_glm2 <- predict(m.glm2, valid.sub, type="response")
?predict.glm
summary(valid.sub$pred_glm2)
valid.sub$pred_glm2 <- ifelse(predict(m.glm2, valid.sub, type="response") >= 0.15, 1, 0)
DfAttritionCost(valid.sub, "pred_glm2")
valid.sub$pred_glm2 <- ifelse(predict(m.glm2, valid.sub, type="response") >= 0.5, 1, 0)
DfAttritionCost(valid.sub, "pred_glm2")
l <- predict(m.class, valid.sub, type="class")
table(l)
valid.sub$pred_class <- predict(m.class, valid.sub, type="class")
DfAttritionCost(valid.sub, "pred_class")
m.class <- naiveBayes(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3,
data=train.sub)
valid.sub$pred_class <- predict(m.class, valid.sub, type="class")
DfAttritionCost(valid.sub, "pred_class")
table(train.sub$mgroup3)
table(train.sub$mgroup1)
table(train.sub$mgroup2)
max.vec <- df.names[str_detect(df.names, "max")]
max.vec
max.df <- subset(df, select = c("fraud_ind", "authzn_amt", max.vec))
head(max.df)
max.df <- subset(df, select = max.vec)
head(max.df)
max.df$max_purchase <- apply(max.df, 1, max)
head(max.df)
df$max_purchase <- apply(max.df, 1, max)
df$is_gt_maxpurchase <- ifelse(df$authzn_amt > df$max_purchase, 1, 0)
df$is_gt_maxpurchase <- factor(ifelse(df$authzn_amt > df$max_purchase, 1, 0))
l <- subset(df, validation == 0)
table(l$fraud_ind)
aggregate(encryption_key ~ fraud_ind + is_gt_maxpurchase, l, length)
l2 <- aggregate(encryption_key ~ fraud_ind + is_gt_maxpurchase, l, length)
l2
d.cast(fraud_ind ~ is_gt_maxpurchase, l2, value.var=encryption_key)
library(reshape2)
d.cast(fraud_ind ~ is_gt_maxpurchase, l2, value.var=encryption_key)
dcast(fraud_ind ~ is_gt_maxpurchase, l2, value.var=encryption_key)
dcast(formula=fraud_ind ~ is_gt_maxpurchase, data=l2, value.var=encryption_key)
names(l2)
dcast(formula=fraud_ind ~ is_gt_maxpurchase, data=l2, value.var="encryption_key")
dcast(formula=is_gt_maxpurchase ~ fraud_ind, data=l2, value.var=encryption_key)
dcast(formula=is_gt_maxpurchase ~ fraud_ind, data=l2, value.var="encryption_key")
library(party)
library(foreach)
library(randomForest)
library(e1071)
# Create Train, Validation, Test ------------------------------------------
train.df <- subset(df, validation == 0)
test.df <- subset(df, validation == 1)
set.seed(1234)
index <- 1:nrow(train.df)
trainindex <- sample(index, as.integer(length(index)*0.6))
# Convert to factors
# Also note we define a new data frame (as a backup)
train2.df <- train.df
train2.df$sb_indf <- factor(train2.df$sb_ind)
train2.df$cnp_indf <- factor(train2.df$cnp_ind)
train2.df$fraud_indf <- factor(train2.df$fraud_ind)
train.sub <- train2.df[trainindex, ]
valid.sub <- train2.df[-trainindex, ]
m.glm2 <- glm(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3,
family=binomial(logit), data=train.sub)
summary(m.glm2)
m.glm2 <- glm(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3 + is_gt_maxpurchase,
family=binomial(logit), data=train.sub)
summary(m.glm2)
m.class <- naiveBayes(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3 + is_gt_maxpurchase,
data=train.sub)
summary(m.class)
m.class
valid.sub$pred_class <- predict(m.class, valid.sub, type="class")
DfAttritionCost(valid.sub, "pred_class")
table(valid.sub$pred_class)
table(valid.sub$fraud_ind)
m.class <- naiveBayes(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3,
data=train.sub)
valid.sub$pred_class <- predict(m.class, valid.sub, type="class")
table(valid.sub$pred_class)
DfAttritionCost(valid.sub, "pred_class")
m.class <- naiveBayes(fraud_indf ~ cnp_indf + authzn_amt + cl_amt +
mgroup1 + mgroup2 + mgroup3 +
count_mgroup1 + count_mgroup2 + count_mgroup3 + is_gt_maxpurchase,
data=train.sub)
valid.sub$pred_class <- predict(m.class, valid.sub, type="class")
DfAttritionCost(valid.sub, "pred_class")
